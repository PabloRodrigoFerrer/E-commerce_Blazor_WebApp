@page "/perfil"
@inject IWebHostEnvironment env
@inject UserService _userService
@rendermode InteractiveServer
<PageTitle>Mi perfil</PageTitle>

<h3>Mi perfil</h3>

@if (!_cargando)
{
    @if (_mostrarMensaje)
    {
        <div class="modal fade show" id="mensajeModal" tabindex="-1" role="dialog" style="display:block; background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Mensaje</h5>
                    </div>
                    <div class="modal-body">
                        <p>@_mensaje</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" onclick="history.back()" class="btn btn-primary">Aceptar</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="row">
        <div class="col-md-6 col-12 ">
            <div class="mb-3">
                <label class="form-label">Email</label>
                <input value="@_usuario.Email" type="email" readonly Class="form-control" />
            </div>
            <div class="mb-3">
                <label class="form-label">Nombre</label>
                <input @bind="@_usuario.Nombre" type="text" Class="form-control" />
            </div>
            <div class="mb-3">
                <label class="form-label">Apellido</label>
                <input @bind="@_usuario.Apellido" type="text" Class="form-control" />
            </div>
            <div class="mb-3">
                <label class="form-label">Genero</label>
                <select Class="form-select" @bind="@_usuario.sexo">
                    <option>--Seleccionar--</option>
                    <option>Masculino</option>
                    <option>Femenino</option>
                </select>
            </div>
            <div class="mb-3">
                <label class="form-label">Fecha nacimiento</label>
                <input @bind="_usuario.FechaNacimiento" type="date" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Direccion</label>
                <input @bind="_usuario.Direccion" placeholder="Av.San Martin 2032, Cordoba, CP: 1514" class="form-control" />
            </div>
        </div>

        <div class="col-md-6 col-12 mt-4 mt-md-0">
            <div class="mb-3">
                <InputFile OnChange="HandleSelected" class="form-control" />
            </div>
            <div>
                @if (!string.IsNullOrEmpty(_usuario.urlImagen))
                {

                    <img src="@_usuario.urlImagen" class="img-fluid mx-auto d-block" />
                }
            </div>
        </div>
    </div>

    <div class="mt-3">
        <button class="btn btn-primary" @onclick="GuardarPerfil_Click">Guardar</button>
        <a class="ms-2" href="/Default">Regresar</a>
    </div>
}
else
{
    <p>Cargando...</p>
}


@code {
    private User _usuario { get; set; } = new();

    private IBrowserFile? imagenTemporal;

    private bool _cargando = true;

    private bool _mostrarMensaje = false;

    private string _mensaje = "Cambios guardados exitosamente✅";

    protected override async Task OnInitializedAsync()
    {
        _usuario = await _userService.GetActiveUserAsync();
        _cargando = false;
    }
    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null)
            return;

        imagenTemporal = file;

        try
        {
            var maxSize = 5 * 1024 * 1024;

            using var stream = file.OpenReadStream(maxAllowedSize: maxSize);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);

            var buffer = memoryStream.ToArray();
            var base64 = Convert.ToBase64String(buffer);
            var contentType = file.ContentType;

            // Mostrar imagen temporalmente (vista previa)
            _usuario.urlImagen = $"data:{contentType};base64,{base64}";
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error al leer la imagen para vista previa: " + ex.Message);
        }
    }

    private async Task GuardarPerfil_Click(MouseEventArgs e)
    {
        if (imagenTemporal != null)
        {
            var rutaImagen = await _userService.GuardarImagenAsync(imagenTemporal, _usuario.Id, env.WebRootPath);
            _userService.ActiveUser.urlImagen = rutaImagen;
        }

        await _userService.Actualizar(_userService.ActiveUser);
        _usuario = _userService.ActiveUser;
        _mostrarMensaje = true;
    }
}
